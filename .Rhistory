setwd("E:/Data Science - John Hopkins University/05. Reproducible Research/2. Week 2/RepData_PeerAssessment1")
setwd("E:/Data Science - John Hopkins University/05. Reproducible Research/2. Week 2/RepData_PeerAssessment1")
data <- read.csv("./data/activity.csv", header = TRUE)
data$date <- as.Date(as.character(data$date), format="%Y-%m-%d")
require(ggplot2)
require(plyr)
data2 <- data[complete.cases(data$steps),1:2]
plot1Data <- ddply(data2, .(date), summarize, totSteps = sum(steps))
View(data)
View(data)
summary(data$interval)
?plot
plot2Data <- ddply(data2, .(interval), summarize, avgSteps = mean(steps))
View(data2)
View(data2)
View(data2)
data1 <- data[complete.cases(data$steps),1:2]
data2 <- data[complete.cases(data$steps),c(1,3)]
View(data2)
View(data2)
plot2Data <- ddply(data2, .(interval), summarize, avgSteps = mean(steps))
View(plot2Data)
View(plot2Data)
plot(plot2Data$interval, plot2Data$steps)
plot(plot2Data$steps, plot2Data$interval)
plot(plot2Data$steps, plot2Data$interval)
plot(plot2Data$interval, plot2Data$steps)
plot(plot2Data$interval, plot2Data$steps, type="l")
plot(plot2Data$steps, plot2Data$interval, type="l")
length(plot2Data$steps)
View(plot2Data)
View(plot2Data)
View(plot2Data)
plot(plot2Data$avgSteps, plot2Data$interval, type="l")
plot(plot2Data$interval, plot2Data$avgSteps, type="l")
plot(plot2Data$interval, plot2Data$avgSteps, type="l", xlabel="Day interval", ylabel="Average Daily Steps")
plot(plot2Data$interval, plot2Data$avgSteps, type="l", xlabel="Day interval", ylabel="Average Daily Steps")
plot(plot2Data$interval, plot2Data$avgSteps, type="l")
plot(plot2Data$avgSteps, plot2Data$interval, type="l")
plot(plot2Data$interval, plot2Data$avgSteps, type="l")
plot(plot2Data$interval, plot2Data$avgSteps, type="l", xlab="Day interval", ylab="Average Daily Steps", main="Average Steps across the day")
sprintf
sprintf(%4d, plot2Data$interval)
sprintf("%4d", plot2Data$interval)
sprintf("%04d", plot2Data$interval)
plot2Data$interval <- sprintf("%04d", plot2Data$interval)
View(plot2Data)
View(plot2Data)
plot2Data$interval <- paste0(substr(plot2Data$interval, 1, 2), ":", plot2Data$interval, 3, 4)
View(plot2Data)
View(plot2Data)
plot2Data <- ddply(data2, .(interval), summarize, avgSteps = mean(steps))
plot2Data$interval <- sprintf("%04d", plot2Data$interval)
plot2Data$interval <- paste0(substr(plot2Data$interval, 1, 2), ":", substr(plot2Data$interval, 3, 4))
plot(plot2Data$interval, plot2Data$avgSteps, type="l",
xlab="Day interval",
ylab="Average Daily Steps",
main="Average Steps across the day")
plot2Data <- ddply(data2, .(interval), summarize, avgSteps = mean(steps))
View(plot2Data)
View(plot2Data)
plot2Data$interval <- sprintf("%04d", plot2Data$interval)
View(plot2Data)
View(plot2Data)
plot(plot2Data$interval, plot2Data$avgSteps, type="l",
xlab="Day interval",
ylab="Average Daily Steps",
main="Average Steps across the day")
View(plot2Data)
View(plot2Data)
plot2Data$interval <- paste0(substr(plot2Data$interval, 1, 2), ":", substr(plot2Data$interval, 3, 4))
View(plot2Data)
View(plot2Data)
plot(plot2Data$interval, plot2Data$avgSteps, type="l",
xlab="Day interval",
ylab="Average Daily Steps",
main="Average Steps across the day")
?as.Date
as.Date(plot2Data$interval, "%h:$%m")
as.Date(plot2Data$interval, "%h:%m")
as.Date(plot2Data$interval, "%H:%m")
strptime(plot2Data$interval, "%H:%m")
plot2Data$interval
strptime("20/2/06 11:16:16.683", "%d/%m/%y %H:%M:%OS")
strptime("11:16:16.683", "%H:%M:%OS")
strptime("11:16", "%H:%M")
strptime(plot2Data$interval, "%H:%m")
strptime("11:16", "%H:%M")
strptime(plot2Data$interval, "%H:%m")
strptime(plot2Data$interval, "%H:%M")
plot(strptime(plot2Data$interval, "%H:%M"), plot2Data$avgSteps, type="l",
xlab="Day interval",
ylab="Average Daily Steps",
main="Average Steps across the day")
plot2Data <- ddply(data2, .(interval), summarize, avgSteps = mean(steps))
data2 <- data[complete.cases(data$steps),c(1,3)]
plot2Data <- ddply(data2, .(interval), summarize, avgSteps = mean(steps))
# Format the interval so that it is present as a time
plot2Data$interval <- sprintf("%04d", plot2Data$interval)
plot2Data$interval <- strptime(paste0(substr(plot2Data$interval, 1, 2), ":", substr(plot2Data$interval, 3, 4)), "%H:%M")
plot(plot2Data$interval, plot2Data$avgSteps, type="l",
xlab="Day interval",
ylab="Average Daily Steps",
main="Average Steps across the day")
plot2Data$interval[max(plot2Data)]
plot2Data$interval[max(plot2Data$avgSteps)]
max(plot2Data$avgSteps)
View(plot2Data)
View(plot2Data)
max(plot2Data$avgSteps)
View(plot2Data)
View(plot2Data)
max(plot2Data$avgSteps)
plot2Data$interval[which.max(plot2Data$avgSteps)]
as.Date(plot2Data$interval[which.max(plot2Data$avgSteps)], format="%H:%M")
strftime(plot2Data$interval[which.max(plot2Data$avgSteps)], format="%H:%M")
nrows(complete.cases(data))
complete.cases(data)
sum(complete.cases(data))
nrows(data)
nrow(data)
View(plot2Data)
View(plot2Data)
View(plot1Data)
View(plot1Data)
View(plot2Data)
View(plot2Data)
is.na(data)
View(data)
View(data)
is.na(data$steps)
unique(data$date(is.na(data$steps)))
unique(data$date[is.na(data$steps)])
tmp <- data
dt <- unique(data$date[is.na(data$steps)])
source('~/.active-rstudio-document', echo=TRUE)
dataNA <- unique(data$date[is.na(data$steps)])
lapply()
dataNA <- unique(data$date[is.na(data$steps)])
dataNA
lapply(dataNA, function(dt) {})
dataNA
mean(data$steps[data$date == dataNA[1], na.rm=TRUE])
mean(data$steps[data$date == dataNA[1]], na.rm=TRUE)
dataNA[1]
data$steps[data$date == dataNA[1])
data$steps[data$date == dataNA[1]
]
data$steps[data$date == dataNA[1]]
data$date
data$steps[data$date == dataNA[1],]
data$steps[data$date == as.Date(dataNA[1])]
class(dataNA)
data[data$date == dataNA[1]]
data[data$date == dataNA[1],1]
dataNA
data[data$date == "2012-10-01"]
data[data$date == "2012-10-01", 1]
data[data$date == "2012-11-01", 1]
dataNA
dataNA <- unique(data$interval[is.na(data$steps)])
dataNA
data[data$interval == dataNA[1]]
data$steps[data$interval == dataNA[1]]
data$steps[data$interval == dataNA[1], rm.na=TRUE]
data$steps[data$interval == dataNA[1], na.rm=TRUE]
mean(data$steps[data$interval == dataNA[1]], na.rm=TRUE)
lapply(dataNA, function(x) mean(data$steps[data$interval == x], na.rm=TRUE))
length(dataNA)
lapply(dataNA, function(x) mean(data$steps[data$interval == x], na.rm=TRUE))
data$steps[data$interval == dataNA[1]]
data$steps[data$interval == dataNA[1] & is.na = TRUE]
data$steps[data$interval == dataNA[1] & is.na(data$steps)]
lapply(dataNA, function(x) mean(data$steps[data$interval == x], na.rm=TRUE))
# Function to update NA values
updateNA <- function(x) {
# compute the mean for one interval
calcMean <- mean(data$steps[data$interval == x], na.rm=TRUE)
data$steps[data$interval == x & is.na(data$steps)] <- calcMean
}
# Get the intervals that contain NA
intervalNA <- unique(data$interval[is.na(data$steps)])
lapply(intervalNA, function(x) updateNA(x))
view(data)
View(data)
updateNA <- function(x) {
# compute the mean for one interval
calcMean <- mean(data$steps[data$interval == x], na.rm=TRUE)
data$steps[data$interval == x & is.na(data$steps)] <- calcMean
}
intervalNA <- unique(data$interval[is.na(data$steps)])
intervalNA
lapply(intervalNA, function(x) updateNA(x))
View(data)
updateNA
intervalNA
calcMean <- mean(data$steps[data$interval == x], na.rm=TRUE)
calcMean <- mean(data$steps[data$interval == "0"], na.rm=TRUE)
calcMean
data$steps[data$interval == "0" & is.na(data$steps)] <- calcMean
View(data)
updateNA <- function(x) {
# compute the mean for one interval
calcMean <- mean(data$steps[data$interval == x], na.rm=TRUE)
data$steps[data$interval == x & is.na(data$steps)] <- calcMean
}
# Get the intervals that contain NA
intervalNA <- unique(data$interval[is.na(data$steps)])
for (x in intervalNA) {
updateNA(x)
}
View(data)
View(data)
updateNA <- function(x) {
# compute the mean for one interval
calcMean <- mean(data$steps[data$interval == x], na.rm=TRUE)
data$steps[data$interval == x & is.na(data$steps)] <- calcMean
}
# Get the intervals that contain NA
intervalNA <- unique(data$interval[is.na(data$steps)])
for (x in intervalNA) {
x
}
for (x in intervalNA) {
x
}
for (x in intervalNA) {
print(x)
}
intervalNA
intervalNA <- unique(data$interval[is.na(data$steps)])
debugSource('E:/Data Science - John Hopkins University/05. Reproducible Research/2. Week 2/RepData_PeerAssessment1/temp.R')
data$steps[data$interval == x & is.na(data$steps)]
data$steps[data$interval == x & is.na(data$steps)]
View(data)
View(data)
View(data)
View(data)
q
x
e
q
q
data<- tmp
View(data)
View(data)
# Function to update NA values
updateNA <- function(x) {
# compute the mean for one interval
calcMean <- mean(data$steps[data$interval == x], na.rm=TRUE)
data$steps[data$interval == x & is.na(data$steps)] <- calcMean
}
# Get the intervals that contain NA
intervalNA <- unique(data$interval[is.na(data$steps)])
for (x in intervalNA) {
calcMean <- mean(data$steps[data$interval == x], na.rm=TRUE)
data$steps[data$interval == x & is.na(data$steps)] <- calcMean
}
View(data)
View(data)
plot3Data <- ddply(filledData, .(date), summarize,
totSteps = sum(steps),
meanSteps = mean(steps),
medianSteps = meadian(steps))
days <- as.numeric(max(plot3Data$date) - min(plot3Data$date) + 1)
p1 <- ggplot(plot3Data, aes(x=date, y = totSteps))
p1 <- p1 + geom_histogram(stat="identity")
p1 <- p1 + ylab("Total Steps") + xlab("Date") + ggtitle("Total number of steps taken each day")
p1 <- p1 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(plot3Data, aes(x=date, y = meanSteps))
p2 <- p2 + geom_histogram(stat="identity")
p2 <- p2 + ylab("Mean Steps") + xlab("Date") + ggtitle("Mean number of steps taken each day")
p2 <- p2 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3 <- ggplot(plot3Data, aes(x=date, y = medianSteps))
p3 <- p3 + geom_histogram(stat="identity")
p3 <- p3 + ylab("Median Steps") + xlab("Date") + ggtitle("Median number of steps taken each day")
p3 <- p3 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
multiplot(p1, p2, p3, rows=3)
library(ggplot2)
?multiplot
require(grid)
require(gridExtra)
library(gridExtra)
package.install("gridExtra")
install.packages("gridExtra")
for (x in c("ggplot2", "plyr", "grid", "gridExtra")) {
if (x %in% rownames(installed.packages()) == FALSE) {
install.packages(x)
}
}
require(ggplot2)
require(grid)
require(gridExtra)
require(plyr)
plot3Data <- ddply(filledData, .(date), summarize,
totSteps = sum(steps),
meanSteps = mean(steps),
medianSteps = meadian(steps))
days <- as.numeric(max(plot3Data$date) - min(plot3Data$date) + 1)
p1 <- ggplot(plot3Data, aes(x=date, y = totSteps))
p1 <- p1 + geom_histogram(stat="identity")
p1 <- p1 + ylab("Total Steps") + xlab("Date") + ggtitle("Total steps")
p1 <- p1 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(plot3Data, aes(x=date, y = meanSteps))
p2 <- p2 + geom_histogram(stat="identity")
p2 <- p2 + ylab("Mean Steps") + xlab("Date") + ggtitle("Mean steps")
p2 <- p2 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3 <- ggplot(plot3Data, aes(x=date, y = medianSteps))
p3 <- p3 + geom_histogram(stat="identity")
p3 <- p3 + ylab("Median Steps") + xlab("Date") + ggtitle("Median steps")
p3 <- p3 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, p3, nrow = 3, main = "Analysis of step movement by day")
if (!file.exists("./data")) {
dir.create("./data")
}
zipFileNm <- "./data/activity.zip"
dLoadFileNm <- "./data/sourceDt.RData"
## if the zip file does not exist download the file
if (!file.exists(zipFileNm)) {
# this file stores the date when the archive was downloaded
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, destfile = zipFileNm)
# extract the archive
unzip(zipFileNm, overwrite=TRUE, exdir="./data")
# update the date the file was downloaded
downloadDtTm <- format(Sys.time(), "%b %d %Y at %H:%M:%S")
save(downloadDtTm, file = dLoadFileNm)
} else {
load(dLoadFileNm, envir=environment())
}
data <- read.csv("./data/activity.csv", header = TRUE)
# Convert the data field to a date
data$date <- as.Date(as.character(data$date), format="%Y-%m-%d")
# Install and load libraries used here
for (x in c("ggplot2", "plyr", "grid", "gridExtra")) {
if (x %in% rownames(installed.packages()) == FALSE) {
install.packages(x)
}
}
require(ggplot2)
require(grid)
require(gridExtra)
require(plyr)
data1 <- data[complete.cases(data$steps),1:2]
plot1Data <- ddply(data1, .(date), summarize, totSteps = sum(steps))
days <- as.numeric(max(plot1Data$date) - min(plot1Data$date) + 1)
p <- ggplot(plot1Data, aes(x=date, y = totSteps))
p <- p + geom_histogram(stat="identity")
p <- p + ylab("Total Steps") + xlab("Date")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
data2 <- data[complete.cases(data$steps),c(1,3)]
plot2Data <- ddply(data2, .(interval), summarize, avgSteps = mean(steps))
# Format the interval so that it is present as a time
plot2Data$interval <- sprintf("%04d", plot2Data$interval)
plot2Data$interval <- strptime(paste0(substr(plot2Data$interval, 1, 2), ":", substr(plot2Data$interval, 3, 4)), "%H:%M")
plot(plot2Data$interval, plot2Data$avgSteps, type="l",
xlab="Day interval",
ylab="Average Daily Steps",
main="Average Steps across the day")
filledData <- data
# Get the intervals that contain NA
intervalNA <- unique(filledData$interval[is.na(filledData$steps)])
for (x in intervalNA) {
calcMean <- mean(filledData$steps[filledData$interval == x], na.rm=TRUE)
filledData$steps[filledData$interval == x & is.na(filledData$steps)] <- calcMean
}
data1 <- data[complete.cases(data$steps),1:2]
plot1Data <- ddply(data1, .(date), summarize, totSteps = sum(steps))
p <- ggplot(plot1Data, aes(x=date, y = totSteps))
p <- p + geom_histogram(stat="identity")
p <- p + ylab("Total Steps") + xlab("Date")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
plot3Data <- ddply(filledData, .(date), summarize,
totSteps = sum(steps),
meanSteps = mean(steps),
medianSteps = meadian(steps))
plot3Data <- ddply(filledData, .(date), summarize,
totSteps = sum(steps),
meanSteps = mean(steps),
medianSteps = median(steps))
View(plot3Data)
View(plot3Data)
p1 <- ggplot(plot3Data, aes(x=date, y = totSteps))
p1 <- p1 + geom_histogram(stat="identity")
p1 <- p1 + ylab("Total Steps") + xlab("Date") + ggtitle("Total steps")
p1 <- p1 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(plot3Data, aes(x=date, y = meanSteps))
p2 <- p2 + geom_histogram(stat="identity")
p2 <- p2 + ylab("Mean Steps") + xlab("Date") + ggtitle("Mean steps")
p2 <- p2 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3 <- ggplot(plot3Data, aes(x=date, y = medianSteps))
p3 <- p3 + geom_histogram(stat="identity")
p3 <- p3 + ylab("Median Steps") + xlab("Date") + ggtitle("Median steps")
p3 <- p3 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, p3, nrow = 3, main = "Analysis of step movement by day")
write.csv(file="acb.csv"
)
write.csv(file="acb.csv", x=plot3Data)
gwted()
getwd()
write.csv(file="acb2.csv", x=filledData)
plot3Data$medianSteps
median(filledData$steps)
summary(filledData$steps)
median(data2)
median(data2$steps)
aggregated1<-aggregate(activity$steps, by = list(activity$date), FUN = median, na.rm=T)
aggregated1<-aggregate(data$steps, by = list(data$date), FUN = median, na.rm=T)
aggregated1
filledData$weekday <- weekday(filledData$date)
filledData$weekday <- weekdays(filledData$date)
filledData
?weekdays
filledData$date
filledData$date$wday
View(filledData)
View(filledData)
filledData$weekday <- ifelse(weekdays(filledData$date) %in% c("Saturday", "Sunday"), 0, 1)
View(filledData)
View(filledData)
table(filledData$weekday)
filledData$dayType <- ifelse(weekdays(filledData$date) %in% c("Saturday", "Sunday"), 0, 1)
levels(filledData$dayType)=c('Weekend', "Weekday")
summary(filledData$dayType)
class(filledData$dayType)
filledData$dayType <- factors(filledData$dayType, labels=c('Weekend', "Weekday"))
filledData$dayType <- factor(filledData$dayType, labels=c('Weekend', "Weekday"))
summary(filledData$dayType)
plot4Data <- ddply(filledData, .(interval, dayType), summarize, avgSteps = mean(steps))
ggplot(plot4Data, aes(x=date, y = avgSteps), facet=(dayType ~ .)) +
geom_line()
ggplot(plot4Data, aes(x=date, y = avgSteps) + geom_line()
)
ggplot(plot4Data, aes(x=date, y = avgSteps)) + geom_line()
ggplot(plot4Data, aes(x=date, y = avgSteps)) + geom_line(stat="identity")
View(plot4Data)
View(plot4Data)
View(plot4Data)
View(plot4Data)
ggplot(plot4Data, aes(x=interval, y = avgSteps), facet=(dayType ~ .)) +
geom_line()
ggplot(plot4Data, aes(x=interval, y = avgSteps), facets=(dayType ~ .)) +
geom_line()
facet_grid(facets=(dayType ~ .)) +
)
ggplot(plot4Data, aes(x=interval, y = avgSteps)) +
facet_grid(facets=(dayType ~ .)) +
geom_line()
ggplot(plot4Data, aes(x=interval, y = avgSteps)) +
facet_grid(facets=(dayType ~ .)) +
geom_line() +
xlab("5 Minute Interval") +
ylab("Average Steps")
